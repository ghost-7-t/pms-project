// This file is generated by Firebase Genkit.
'use server';
/**
 * @fileOverview Summarizes admission eligibility based on AI predictions.
 *
 * - admissionEligibilitySummary - A function that handles the summarization of admission eligibility.
 * - AdmissionEligibilitySummaryInput - The input type for the admissionEligibilitySummary function.
 * - AdmissionEligibilitySummaryOutput - The return type for the admissionEligibilitySummary function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AdmissionEligibilitySummaryInputSchema = z.object({
  predictedScore: z.number().describe('The predicted admission score from the AI model.'),
  academicBackground: z.string().describe('The applicant\'s academic background and qualifications.'),
  extracurricularActivities: z.string().describe('The applicant\'s extracurricular activities and achievements.'),
  personalStatement: z.string().describe('The applicant\'s personal statement.'),
});
export type AdmissionEligibilitySummaryInput = z.infer<
  typeof AdmissionEligibilitySummaryInputSchema
>;

const AdmissionEligibilitySummaryOutputSchema = z.object({
  eligibilitySummary: z
    .string()
    .describe('A summary of the applicant\'s admission eligibility based on the AI predictions.'),
});
export type AdmissionEligibilitySummaryOutput = z.infer<
  typeof AdmissionEligibilitySummaryOutputSchema
>;

export async function admissionEligibilitySummary(
  input: AdmissionEligibilitySummaryInput
): Promise<AdmissionEligibilitySummaryOutput> {
  return admissionEligibilitySummaryFlow(input);
}

const prompt = ai.definePrompt({
  name: 'admissionEligibilitySummaryPrompt',
  input: {schema: AdmissionEligibilitySummaryInputSchema},
  output: {schema: AdmissionEligibilitySummaryOutputSchema},
  prompt: `You are an AI assistant designed to summarize an applicant\'s admission eligibility based on several factors.

  Based on the provided information, create a concise summary of the applicant\'s eligibility for admission. Focus on the key strengths and weaknesses evident from the data.

  Predicted Score: {{{predictedScore}}}
  Academic Background: {{{academicBackground}}}
  Extracurricular Activities: {{{extracurricularActivities}}}
  Personal Statement: {{{personalStatement}}}

  Eligibility Summary:`,
});

const admissionEligibilitySummaryFlow = ai.defineFlow(
  {
    name: 'admissionEligibilitySummaryFlow',
    inputSchema: AdmissionEligibilitySummaryInputSchema,
    outputSchema: AdmissionEligibilitySummaryOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
